{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\backup\\\\GitHub\\\\REACT JS\\\\Learn-react-js\\\\pages\\\\[meetupId]\\\\index.js\";\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\n\nfunction MeetupDetails(props) {\n  return /*#__PURE__*/_jsxDEV(MeetupDetail, {\n    title: props.meetup.title,\n    image: props.meetup.image,\n    address: props.meetup.address,\n    description: props.meetup.description\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 5\n  }, this);\n} //export asyn function getStaticPaths\n\n\n_c = MeetupDetails;\nexport var __N_SSG = true;\nexport default MeetupDetails;\n\nvar _c;\n\n$RefreshReg$(_c, \"MeetupDetails\");","map":{"version":3,"sources":["D:/backup/GitHub/REACT JS/Learn-react-js/pages/[meetupId]/index.js"],"names":["MeetupDetail","MeetupDetails","props","meetup","title","image","address","description"],"mappings":";;AAAA,OAAOA,YAAP,MAAyB,uCAAzB;;AAEA,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAC5B,sBACE,QAAC,YAAD;AACE,IAAA,KAAK,EAAEA,KAAK,CAACC,MAAN,CAAaC,KADtB;AAEE,IAAA,KAAK,EAAEF,KAAK,CAACC,MAAN,CAAaE,KAFtB;AAGE,IAAA,OAAO,EAAEH,KAAK,CAACC,MAAN,CAAaG,OAHxB;AAIE,IAAA,WAAW,EAAEJ,KAAK,CAACC,MAAN,CAAaI;AAJ5B;AAAA;AAAA;AAAA;AAAA,UADF;AAQD,C,CACD;;;KAVSN,a;;AAuDT,eAAeA,aAAf","sourcesContent":["import MeetupDetail from \"../../components/meetups/MeetupDetail\";\r\nimport { MongoClient, ObjectId } from \"mongodb\";\r\nfunction MeetupDetails(props) {\r\n  return (\r\n    <MeetupDetail\r\n      title={props.meetup.title}\r\n      image={props.meetup.image}\r\n      address={props.meetup.address}\r\n      description={props.meetup.description}\r\n    />\r\n  );\r\n}\r\n//export asyn function getStaticPaths\r\nexport async function getStaticPaths() {\r\n  // fetch data from an API flitter _id\r\n  const client = await MongoClient.connect(\r\n    \"mongodb+srv://huyhung:hung2503@cluster0.moxmi.mongodb.net/meetups?retryWrites=true&w=majority\"\r\n  );\r\n  const db = client.db();\r\n\r\n  const meetupsCollection = db.collection(\"meetups\");\r\n  const meetups = await meetupsCollection.find({}, { _id: 1 }).toArray();\r\n  //return an array of paths\r\n  return {\r\n    fallback: false,\r\n    paths: meetups.map((meetup) => ({\r\n      params: { meetupId: meetup._id.toString() },\r\n    })),\r\n  };\r\n}\r\n\r\n//export asyn function getStaticProps\r\nexport async function getStaticProps(context) {\r\n  //fetch data for single meetup\r\n  const meetupId = context.params.meetupId;\r\n  // fetch data from an API flitter _id\r\n  const client = await MongoClient.connect(\r\n    \"mongodb+srv://huyhung:hung2503@cluster0.moxmi.mongodb.net/meetups?retryWrites=true&w=majority\"\r\n  );\r\n  const db = client.db();\r\n\r\n  const meetupsCollection = db.collection(\"meetups\");\r\n  const selectedMeetup = await meetupsCollection.findOne({\r\n    _id: ObjectId(meetupId), //flitter _id,\r\n  });\r\n  client.close();\r\n  return {\r\n    props: {\r\n      meetupData: {\r\n        ...selectedMeetup,\r\n        _id: selectedMeetup._id.toString()\r\n  }\r\n    },\r\n    revalidate: 1,\r\n  };\r\n}\r\n\r\nexport default MeetupDetails;\r\n"]},"metadata":{},"sourceType":"module"}