{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"D:\\\\backup\\\\GitHub\\\\REACT JS\\\\Learn-react-js\\\\pages\\\\[meetupId]\\\\index.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\nimport { MongoClient, ObjectId } from \"mongodb\";\n\nfunction MeetupDetails(props) {\n  return /*#__PURE__*/_jsxDEV(MeetupDetail, {\n    title: props.meetup.title,\n    image: props.meetup.image,\n    address: props.meetup.address,\n    description: props.meetup.description\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 5\n  }, this);\n} //export asyn function getStaticPaths\n\n\nexport async function getStaticPaths() {\n  // fetch data from an API flitter _id\n  const client = await MongoClient.connect(\"mongodb+srv://huyhung:hung2503@cluster0.moxmi.mongodb.net/meetups?retryWrites=true&w=majority\");\n  const db = client.db();\n  const meetupsCollection = db.collection(\"meetups\");\n  const meetups = await meetupsCollection.find({}, {\n    _id: 1\n  }).toArray(); //return an array of paths\n\n  return {\n    fallback: false,\n    paths: meetups.map(meetup => ({\n      params: {\n        meetupId: meetup._id.toString()\n      }\n    }))\n  };\n} //export asyn function getStaticProps\n\nexport async function getStaticProps(context) {\n  //fetch data for single meetup\n  const meetupId = context.params.meetupId; // fetch data from an API flitter _id\n\n  const client = await MongoClient.connect(\"mongodb+srv://huyhung:hung2503@cluster0.moxmi.mongodb.net/meetups?retryWrites=true&w=majority\");\n  const db = client.db();\n  const meetupsCollection = db.collection(\"meetups\");\n  const selectedMeetup = await meetupsCollection.findOne({\n    _id: ObjectId(meetupId) //flitter _id,\n\n  });\n  client.close();\n  return {\n    props: {\n      meetupData: _objectSpread(_objectSpread({}, selectedMeetup), {}, {\n        _id: selectedMeetup._id.toString()\n      })\n    },\n    revalidate: 1\n  };\n}\nexport default MeetupDetails;","map":{"version":3,"sources":["D:/backup/GitHub/REACT JS/Learn-react-js/pages/[meetupId]/index.js"],"names":["MeetupDetail","MongoClient","ObjectId","MeetupDetails","props","meetup","title","image","address","description","getStaticPaths","client","connect","db","meetupsCollection","collection","meetups","find","_id","toArray","fallback","paths","map","params","meetupId","toString","getStaticProps","context","selectedMeetup","findOne","close","meetupData","revalidate"],"mappings":";;;;;;;;;AAAA,OAAOA,YAAP,MAAyB,uCAAzB;AACA,SAASC,WAAT,EAAsBC,QAAtB,QAAsC,SAAtC;;AACA,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAC5B,sBACE,QAAC,YAAD;AACE,IAAA,KAAK,EAAEA,KAAK,CAACC,MAAN,CAAaC,KADtB;AAEE,IAAA,KAAK,EAAEF,KAAK,CAACC,MAAN,CAAaE,KAFtB;AAGE,IAAA,OAAO,EAAEH,KAAK,CAACC,MAAN,CAAaG,OAHxB;AAIE,IAAA,WAAW,EAAEJ,KAAK,CAACC,MAAN,CAAaI;AAJ5B;AAAA;AAAA;AAAA;AAAA,UADF;AAQD,C,CACD;;;AACA,OAAO,eAAeC,cAAf,GAAgC;AACrC;AACA,QAAMC,MAAM,GAAG,MAAMV,WAAW,CAACW,OAAZ,CACnB,+FADmB,CAArB;AAGA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AAEA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AACA,QAAMC,OAAO,GAAG,MAAMF,iBAAiB,CAACG,IAAlB,CAAuB,EAAvB,EAA2B;AAAEC,IAAAA,GAAG,EAAE;AAAP,GAA3B,EAAuCC,OAAvC,EAAtB,CARqC,CASrC;;AACA,SAAO;AACLC,IAAAA,QAAQ,EAAE,KADL;AAELC,IAAAA,KAAK,EAAEL,OAAO,CAACM,GAAR,CAAajB,MAAD,KAAa;AAC9BkB,MAAAA,MAAM,EAAE;AAAEC,QAAAA,QAAQ,EAAEnB,MAAM,CAACa,GAAP,CAAWO,QAAX;AAAZ;AADsB,KAAb,CAAZ;AAFF,GAAP;AAMD,C,CAED;;AACA,OAAO,eAAeC,cAAf,CAA8BC,OAA9B,EAAuC;AAC5C;AACA,QAAMH,QAAQ,GAAGG,OAAO,CAACJ,MAAR,CAAeC,QAAhC,CAF4C,CAG5C;;AACA,QAAMb,MAAM,GAAG,MAAMV,WAAW,CAACW,OAAZ,CACnB,+FADmB,CAArB;AAGA,QAAMC,EAAE,GAAGF,MAAM,CAACE,EAAP,EAAX;AAEA,QAAMC,iBAAiB,GAAGD,EAAE,CAACE,UAAH,CAAc,SAAd,CAA1B;AACA,QAAMa,cAAc,GAAG,MAAMd,iBAAiB,CAACe,OAAlB,CAA0B;AACrDX,IAAAA,GAAG,EAAEhB,QAAQ,CAACsB,QAAD,CADwC,CAC5B;;AAD4B,GAA1B,CAA7B;AAGAb,EAAAA,MAAM,CAACmB,KAAP;AACA,SAAO;AACL1B,IAAAA,KAAK,EAAE;AACL2B,MAAAA,UAAU,kCACLH,cADK;AAERV,QAAAA,GAAG,EAAEU,cAAc,CAACV,GAAf,CAAmBO,QAAnB;AAFG;AADL,KADF;AAOLO,IAAAA,UAAU,EAAE;AAPP,GAAP;AASD;AAED,eAAe7B,aAAf","sourcesContent":["import MeetupDetail from \"../../components/meetups/MeetupDetail\";\r\nimport { MongoClient, ObjectId } from \"mongodb\";\r\nfunction MeetupDetails(props) {\r\n  return (\r\n    <MeetupDetail\r\n      title={props.meetup.title}\r\n      image={props.meetup.image}\r\n      address={props.meetup.address}\r\n      description={props.meetup.description}\r\n    />\r\n  );\r\n}\r\n//export asyn function getStaticPaths\r\nexport async function getStaticPaths() {\r\n  // fetch data from an API flitter _id\r\n  const client = await MongoClient.connect(\r\n    \"mongodb+srv://huyhung:hung2503@cluster0.moxmi.mongodb.net/meetups?retryWrites=true&w=majority\"\r\n  );\r\n  const db = client.db();\r\n\r\n  const meetupsCollection = db.collection(\"meetups\");\r\n  const meetups = await meetupsCollection.find({}, { _id: 1 }).toArray();\r\n  //return an array of paths\r\n  return {\r\n    fallback: false,\r\n    paths: meetups.map((meetup) => ({\r\n      params: { meetupId: meetup._id.toString() },\r\n    })),\r\n  };\r\n}\r\n\r\n//export asyn function getStaticProps\r\nexport async function getStaticProps(context) {\r\n  //fetch data for single meetup\r\n  const meetupId = context.params.meetupId;\r\n  // fetch data from an API flitter _id\r\n  const client = await MongoClient.connect(\r\n    \"mongodb+srv://huyhung:hung2503@cluster0.moxmi.mongodb.net/meetups?retryWrites=true&w=majority\"\r\n  );\r\n  const db = client.db();\r\n\r\n  const meetupsCollection = db.collection(\"meetups\");\r\n  const selectedMeetup = await meetupsCollection.findOne({\r\n    _id: ObjectId(meetupId), //flitter _id,\r\n  });\r\n  client.close();\r\n  return {\r\n    props: {\r\n      meetupData: {\r\n        ...selectedMeetup,\r\n        _id: selectedMeetup._id.toString()\r\n  }\r\n    },\r\n    revalidate: 1,\r\n  };\r\n}\r\n\r\nexport default MeetupDetails;\r\n"]},"metadata":{},"sourceType":"module"}