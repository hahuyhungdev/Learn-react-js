{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\nimport MeetupDetail from \"../../components/meetups/MeetupDetail\";\nimport { MongoClient, ObjectId } from \"mongodb\";\n\nfunction MeetupDetails(props) {\n  return /*#__PURE__*/_jsx(MeetupDetail, {\n    title: props.meetupData.title,\n    image: props.meetupData.image,\n    address: props.meetupData.address,\n    description: props.meetupData.description\n  });\n} //export asyn function getStaticPaths\n\n\nexport async function getStaticPaths() {\n  // fetch data from an API flitter _id\n  const client = await MongoClient.connect(\"mongodb+srv://huyhung:hung2503@cluster0.moxmi.mongodb.net/meetups?retryWrites=true&w=majority\");\n  const db = client.db();\n  const meetupsCollection = db.collection(\"meetups\");\n  const meetups = await meetupsCollection.find({}, {\n    _id: 1\n  }).toArray(); //return an array of paths\n\n  return {\n    fallback: false,\n    paths: meetups.map(meetup => ({\n      params: {\n        meetupId: meetup._id.toString()\n      }\n    }))\n  };\n} //export asyn function getStaticProps\n\nexport async function getStaticProps(context) {\n  //fetch data for single meetup\n  const meetupId = context.params.meetupId; // fetch data from an API flitter _id\n\n  const client = await MongoClient.connect(\"mongodb+srv://huyhung:hung2503@cluster0.moxmi.mongodb.net/meetups?retryWrites=true&w=majority\");\n  const db = client.db();\n  const meetupsCollection = db.collection(\"meetups\");\n  const selectedMeetup = await meetupsCollection.findOne({\n    _id: ObjectId(meetupId) //flitter _id,\n\n  });\n  client.close();\n  return {\n    props: {\n      meetupData: {\n        title: selectedMeetup.title,\n        image: selectedMeetup.image,\n        address: selectedMeetup.address,\n        description: selectedMeetup.description,\n        id: selectedMeetup._id.toString()\n      }\n    },\n    revalidate: 1\n  };\n}\nexport default MeetupDetails;","map":null,"metadata":{},"sourceType":"module"}